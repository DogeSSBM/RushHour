!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	Types.h	36;"	d
BLACK	Colors.h	/^const Color BLACK		= {0x00, 0x00, 0x00, 0xFF};$/;"	v
BLEND_ADD	Types.h	47;"	d
BLEND_ALPHA	Types.h	46;"	d
BLEND_MOD	Types.h	48;"	d
BLEND_NONE	Types.h	45;"	d
BLUE	Colors.h	/^const Color BLUE 		= {0x00, 0x00, 0xFF, 0xFF};$/;"	v
BORDERLESS	Types.h	/^	BORDERLESS	=		SDL_WINDOW_FULLSCREEN_DESKTOP,$/;"	e	enum:__anon3
BlendMode	Types.h	/^typedef SDL_BlendMode		BlendMode;$/;"	t
CAR_A	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_B	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_C	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_D	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_E	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_F	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_G	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_H	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_I	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_J	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_K	Cars.h	/^	CAR_A,CAR_B,CAR_C,CAR_D,CAR_E,CAR_F,CAR_G,CAR_H,CAR_I,CAR_J,CAR_K,$/;"	e	enum:__anon1
CAR_O	Cars.h	/^	CAR_O,CAR_P,CAR_Q,CAR_R,$/;"	e	enum:__anon1
CAR_P	Cars.h	/^	CAR_O,CAR_P,CAR_Q,CAR_R,$/;"	e	enum:__anon1
CAR_Q	Cars.h	/^	CAR_O,CAR_P,CAR_Q,CAR_R,$/;"	e	enum:__anon1
CAR_R	Cars.h	/^	CAR_O,CAR_P,CAR_Q,CAR_R,$/;"	e	enum:__anon1
CAR_X	Cars.h	/^	CAR_X$/;"	e	enum:__anon1
Car	Cars.h	/^}Car;$/;"	t	typeref:struct:__anon2
CarArrIndex	Cars.h	/^}CarArrIndex;$/;"	t	typeref:enum:__anon1
Color	Types.h	/^typedef SDL_Color 		Color;$/;"	t
Coord	Types.h	/^}Coord;$/;"	t	typeref:union:__anon4
DIR_D	Types.h	/^	DIR_D = 0b10,$/;"	e	enum:__anon6
DIR_L	Types.h	/^	DIR_L = 0b11$/;"	e	enum:__anon6
DIR_R	Types.h	/^	DIR_R = 0b01,$/;"	e	enum:__anon6
DIR_U	Types.h	/^	DIR_U = 0b00,$/;"	e	enum:__anon6
Direction	Types.h	/^}Direction;$/;"	t	typeref:enum:__anon6
Event	Types.h	/^typedef SDL_Event			Event;$/;"	t
FPS	main.c	11;"	d	file:
FULLSCREEN	Types.h	/^	FULLSCREEN	=		SDL_WINDOW_FULLSCREEN,$/;"	e	enum:__anon3
File	Types.h	/^typedef FILE			File;$/;"	t
GREEN	Colors.h	/^const Color GREEN 	= {0x00, 0xFF, 0x00, 0xFF};$/;"	v
GREY	Colors.h	/^const Color GREY		= {0x80, 0x80, 0x80, 0xFF};$/;"	v
GREY1	Colors.h	/^const Color GREY1		= {0xAA, 0xAA, 0xAA, 0xFF};$/;"	v
GREY2	Colors.h	/^const Color GREY2		= {0x7E, 0x7E, 0x7E, 0xFF};$/;"	v
GREY3	Colors.h	/^const Color GREY3		= {0x52, 0x52, 0x52, 0xFF};$/;"	v
GRIDLEN	main.c	1;"	d	file:
HSCALE	main.c	8;"	d	file:
HWINLEN	main.c	4;"	d	file:
I16MAX	Types.h	25;"	d
I16MIN	Types.h	24;"	d
I32MAX	Types.h	27;"	d
I32MIN	Types.h	26;"	d
I64MAX	Types.h	29;"	d
I64MIN	Types.h	28;"	d
I8MAX	Types.h	23;"	d
I8MIN	Types.h	22;"	d
Img	Types.h	/^typedef SDL_Surface 		Img;$/;"	t
Key	Types.h	/^typedef SDL_Keycode 		Key;$/;"	t
NUMCAR	Cars.h	2;"	d
PINK	Colors.h	/^const Color PINK		= {0xFF, 0xC0, 0xCB, 0xFF};$/;"	v
QSCALE	main.c	9;"	d	file:
QWINLEN	main.c	5;"	d	file:
RED	Colors.h	/^const Color RED 		= {0xFF, 0x00, 0x00, 0xFF};$/;"	v
Rect	Types.h	/^typedef SDL_Rect 			Rect;$/;"	t
SCALE	main.c	7;"	d	file:
TB_create	Text.h	/^TextBox* TB_create(uint x, uint y, const char* text)$/;"	f
TB_destroy	Text.h	/^void TB_destroy(TextBox *tb)$/;"	f
TB_draw	Text.h	/^void TB_draw(TextBox *tb)$/;"	f
TB_setText	Text.h	/^void TB_setText(TextBox *tb, const char *text)$/;"	f
TB_setTextSize	Text.h	/^void TB_setTextSize(TextBox *tb, int size)$/;"	f
TPS	main.c	12;"	d	file:
TextBox	Text.h	/^}TextBox;$/;"	t	typeref:struct:__anon8
Ticks	Types.h	/^typedef unsigned int		Ticks;$/;"	t
Time	Types.h	/^typedef time_t			Time;$/;"	t
U16MAX	Types.h	32;"	d
U32MAX	Types.h	33;"	d
U64MAX	Types.h	34;"	d
U8MAX	Types.h	31;"	d
WHITE	Colors.h	/^const Color WHITE		= {0xFF, 0xFF, 0xFF, 0xFF};$/;"	v
WINDOWED	Types.h	/^	WINDOWED	=		0$/;"	e	enum:__anon3
WINLEN	main.c	3;"	d	file:
WindowMode	Types.h	/^}WindowMode;$/;"	t	typeref:enum:__anon3
YELLOW	Colors.h	/^const Color YELLOW	= {0xFF, 0xFF, 0x00, 0xFF};$/;"	v
ZFLOOR	Types.h	37;"	d
arr	Types.h	/^	int arr[2];$/;"	m	union:__anon4
backColor	Text.h	/^	Color backColor;$/;"	m	struct:__anon8
carArr	Cars.h	/^Car carArr[NUMCAR] = {$/;"	v
charToInt	GetInt.h	/^int charToInt(const char c)$/;"	f
clamp	Types.h	/^int clamp(const int n, const int min, const int max)$/;"	f
clear	Graphics.h	/^void clear()$/;"	f
clearTerminal	DogeUtil.h	/^void clearTerminal(void)$/;"	f
color	Cars.h	/^	Color color;$/;"	m	struct:__anon2
coordClamp	Types.h	/^Coord coordClamp(const Coord coord, const int min, const int max)$/;"	f
coordShift	Types.h	/^Coord coordShift(const Coord coord, const Direction dir, const int units)$/;"	f
defaultColor	Graphics.h	/^	Color defaultColor;$/;"	m	struct:__anon7
dirINV	Types.h	86;"	d
dirLR	Types.h	87;"	d
dirNEG	Types.h	90;"	d
dirPOS	Types.h	89;"	d
dirROL	Types.h	82;"	d
dirROR	Types.h	81;"	d
dirUD	Types.h	88;"	d
draw	Graphics.h	/^void draw()$/;"	f
drawCarOutline	Draw.h	/^void drawCarOutline(const char letter)$/;"	f
drawCarSquare	Draw.h	/^void drawCarSquare(const uint x, const uint y, const char letter)$/;"	f
drawCarSquareOutline	Draw.h	/^void drawCarSquareOutline(const uint x, const uint y)$/;"	f
drawCars	Draw.h	/^void drawCars(void)$/;"	f
drawCircle	Graphics.h	/^void drawCircle(uint x, uint y, uint radius)$/;"	f
drawCircleCoord	Graphics.h	/^void drawCircleCoord(const Coord pos, const uint radius)$/;"	f
drawGrid	Draw.h	/^void drawGrid(void)$/;"	f
drawHLine	Graphics.h	/^void drawHLine(uint x, uint y, int len)$/;"	f
drawImg	Image.h	/^void drawImg(Img *image)$/;"	f
drawLine	Graphics.h	/^void drawLine(uint x1, uint y1, uint x2, uint y2)$/;"	f
drawLineCoords	Graphics.h	/^void drawLineCoords(const Coord pos1, const Coord pos2)$/;"	f
drawPixel	Graphics.h	/^void drawPixel(uint x, uint y)$/;"	f
drawRect	Graphics.h	/^void drawRect(uint x, uint y, uint xlen, uint ylen)$/;"	f
drawSquare	Graphics.h	/^void drawSquare(uint x, uint y, uint len)$/;"	f
drawText	Text.h	/^void drawText(uint x, uint y, const char *text)$/;"	f
drawTextCentered	Text.h	/^void drawTextCentered(uint x, uint y, const char *text)$/;"	f
drawVLine	Graphics.h	/^void drawVLine(uint x, uint y, int len)$/;"	f
events	Events.h	/^void events(Ticks frameEnd, char *selected)$/;"	f
fillBorder	Graphics.h	/^void fillBorder(uint x, uint y, uint xlen, uint ylen, int b)$/;"	f
fillCircle	Graphics.h	/^void fillCircle(uint x, uint y, uint radius)$/;"	f
fillCircleCoord	Graphics.h	/^void fillCircleCoord(const Coord pos, const uint radius)$/;"	f
fillRect	Graphics.h	/^void fillRect(uint x, uint y, uint xlen, uint ylen)$/;"	f
fillScreen	Graphics.h	/^void fillScreen()$/;"	f
fillSquare	Graphics.h	/^void fillSquare(uint x, uint y, uint len)$/;"	f
fillSquareCoord	Graphics.h	/^void fillSquareCoord(const Coord pos, const uint len)$/;"	f
flen	DogeUtil.h	/^lint flen(File *f)$/;"	f
font	Graphics.h	/^	TTF_Font* font;$/;"	m	struct:__anon7
fontColor	Graphics.h	/^	Color fontColor;$/;"	m	struct:__anon7
fontSize	Graphics.h	/^	int fontSize;$/;"	m	struct:__anon7
freeImg	Image.h	/^void freeImg(Img *image)$/;"	f
getColor	Graphics.h	/^Color getColor(void)$/;"	f
getInt	GetInt.h	/^int getInt(void)$/;"	f
getR	GetInt.h	/^int getR(const int num)$/;"	f
getTicks	Timing.h	/^Ticks getTicks(void)$/;"	f
gfx	Graphics.h	/^}gfx = {};$/;"	v	typeref:struct:__anon7
gfx_init	Graphics.h	/^void gfx_init(uint winXlen, uint winYlen)$/;"	f
gfx_quit	Graphics.h	/^void gfx_quit(void)$/;"	f
grid	Grid.h	/^char grid[GRIDLEN][GRIDLEN];$/;"	v
gridCoordToScreen	Grid.h	/^Coord gridCoordToScreen(const Coord gpos)$/;"	f
gridToScreen	Grid.h	/^uint gridToScreen(const uint pos)$/;"	f
i16	Types.h	/^typedef int16_t			i16;$/;"	t
i32	Types.h	/^typedef int32_t			i32;$/;"	t
i64	Types.h	/^typedef int64_t			i64;$/;"	t
i8	Types.h	/^typedef int8_t			i8;$/;"	t
img_init	Image.h	/^void img_init(void)$/;"	f
img_quit	Image.h	/^void img_quit(void)$/;"	f
inBound	Types.h	/^bool inBound(const int n, const int min, const int max)$/;"	f
index	Cars.h	/^	CarArrIndex index;$/;"	m	struct:__anon2
init	DogeUtil.h	/^void init(uint winXlen, uint winYlen)$/;"	f
intToChar	GetInt.h	/^char intToChar(const int num)$/;"	f
intToStr	GetInt.h	/^char* intToStr(int num, char* str)$/;"	f
isValidChar	Grid.h	/^bool isValidChar(const int c)$/;"	f
len	Cars.h	/^	uint len;$/;"	m	struct:__anon2
letter	Cars.h	/^	char letter;$/;"	m	struct:__anon2
lint	Types.h	/^typedef long int			lint;$/;"	t
loadDrawImg	Image.h	/^void loadDrawImg(const char *imgFile)$/;"	f
loadGrid	Grid.h	/^void loadGrid(const char *levelStr)$/;"	f
loadImg	Image.h	/^Img* loadImg(const char *imgFile)$/;"	f
main	main.c	/^int main(int argc, char const *argv[])$/;"	f
menu	Menu.h	/^void menu(void)$/;"	f
menuSelect	Menu.h	/^bool menuSelect(Ticks frameEnd, char *levelStr)$/;"	f
moveCarGrid	Grid.h	/^void moveCarGrid()$/;"	f
parseLevelFile	Grid.h	/^bool parseLevelFile(File *f)$/;"	f
printCoord	Types.h	/^void printCoord(const Coord pos)$/;"	f
printGrid	Grid.h	/^void printGrid(void)$/;"	f
r	Text.h	/^	Rect r;$/;"	m	struct:__anon8
randRange	DogeUtil.h	/^float randRange(float a, float b)$/;"	f
readin	DogeUtil.h	/^char* readin(char *buffer, int size)$/;"	f
renderer	Graphics.h	/^	SDL_Renderer* renderer;$/;"	m	struct:__anon7
rgbToColor	Colors.h	/^Color rgbToColor(const uint R, const uint G, const uint B)$/;"	f
rgbaToColor	Colors.h	/^Color rgbaToColor(const uint R, const uint G, const uint B, const uint A)$/;"	f
sameCoord	Types.h	/^bool sameCoord(const Coord pos1, const Coord pos2)$/;"	f
saveScreenshot	Graphics.h	/^void saveScreenshot(const char* file_name)$/;"	f
screenToGrid	Grid.h	/^uint screenToGrid(const uint pos)$/;"	f
setBlend	Graphics.h	/^void setBlend(BlendMode mode)$/;"	f
setColor	Graphics.h	/^void setColor(Color c)$/;"	f
setFontColor	Text.h	/^void setFontColor(Color c)$/;"	f
setFontSize	Text.h	/^void setFontSize(int size)$/;"	f
setRGB	Graphics.h	/^void setRGB(u8 r, u8 g, u8 b)$/;"	f
setRGBA	Graphics.h	/^void setRGBA(u8 r, u8 g, u8 b, u8 a)$/;"	f
setWindowMode	Graphics.h	/^void setWindowMode(const WindowMode mode)$/;"	f
setWindowSize	Graphics.h	/^void setWindowSize(uint x, uint y)$/;"	f
shiftCar	Events.h	/^bool shiftCar(const char letter, const Direction dir)$/;"	f
shiftL	GetInt.h	/^int shiftL(int num, int digits)$/;"	f
shiftR	GetInt.h	/^int shiftR(const int num)$/;"	f
size	Text.h	/^	int size;$/;"	m	struct:__anon8
strToInt	GetInt.h	/^int strToInt(const char *str)$/;"	f
text	Text.h	/^	char* text;$/;"	m	struct:__anon8
textColor	Text.h	/^	Color textColor;$/;"	m	struct:__anon8
text_init	Text.h	/^void text_init(void)$/;"	f
text_quit	Text.h	/^void text_quit(void)$/;"	f
u16	Types.h	/^typedef uint16_t			u16;$/;"	t
u32	Types.h	/^typedef uint32_t			u32;$/;"	t
u64	Types.h	/^typedef uint64_t			u64;$/;"	t
u8	Types.h	/^typedef uint8_t			u8;$/;"	t
uchar	Types.h	/^typedef unsigned char		uchar;$/;"	t
uint	Types.h	/^typedef unsigned int		uint;$/;"	t
ul	Types.h	/^typedef unsigned long		ul;$/;"	t
ull	Types.h	/^typedef unsigned long long	ull;$/;"	t
window	Graphics.h	/^	SDL_Window* window;$/;"	m	struct:__anon7
x	Types.h	/^		int x;$/;"	m	struct:__anon4::__anon5
xlen	Graphics.h	/^	uint xlen, ylen;$/;"	m	struct:__anon7
y	Types.h	/^		int y;$/;"	m	struct:__anon4::__anon5
ylen	Graphics.h	/^	uint xlen, ylen;$/;"	m	struct:__anon7
